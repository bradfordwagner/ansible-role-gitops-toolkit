---
- name: check for {{ gtk_install_dir }}
  become: true
  stat:
    path: '{{ gtk_installed_exe }}'
  changed_when: false
  register: gtk_binary
- when: not gtk_binary.stat.exists
  block:
    # resolve checksum
    - name: get checksums from {{ gtk_checksum_url }}
      uri:
        url: '{{ gtk_checksum_url }}' # https://github.com/rumstead/gitops-toolkit/releases/download/v1.1.2/checksums.txt
        return_content: yes
      register: checksum_response
    - name: set checksum content fact
      set_fact:
        checksum_content: "{{ checksum_response.content }}"
    - name: resolve checksum
      set_fact:
        checksum: "{{ item.split()[0] }}"
      when: gtk_tgz in item
      with_items: "{{ checksum_content.split('\n') }}"

    # download and install
    - name: download {{ gtk_tgz_url }}
      become: '{{ false if is_wsl else true }}'
      get_url:
        url: '{{ gtk_tgz_url }}'
        dest: '{{ gtk_tmp_tgz }}'
        checksum: 'sha256:{{ checksum }}'
        mode: "{{ '647' if is_wsl else '644' }}"
    - name: mkdir {{ gtk_install_dir }}
      become: true
      file:
        path: '{{ gtk_install_dir }}'
        state: directory
        mode: '755'
    - name: unarchive {{ gtk_tmp_tgz }}
      become: true
      unarchive:
        remote_src: true
        src: '{{ gtk_tmp_tgz }}'
        dest: '{{ gtk_install_dir }}'
        creates: '{{ gtk_installed_exe }}'
  # cleanup tgz file
  always:
    - name: rm {{ gtk_tmp_tgz }}
      become: true
      become_user: root
      file:
        path: '{{ gtk_tmp_tgz }}'
        state: absent
- name: link {{ gtk_installed_link }} to {{ gtk_installed_exe }}
  become: true
  file:
    src: '{{ gtk_installed_exe }}'
    dest: '{{ gtk_installed_link }}'
    state: link
    force: true # override existing symlink
